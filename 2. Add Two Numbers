# Recursive Approach
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        def func(curr1, curr2, carry):
            if not curr1 and not curr2:
                return ListNode(1, None) if carry else None
                
            val1, val2 = curr1.val if curr1 else 0, curr2.val if curr2 else 0
            curr1, curr2 = curr1.next if curr1 else None, curr2.next if curr2 else None
            val = (val1 + val2 + carry) % 10
            carry = int(val1 + val2 + carry > 9)
            return ListNode(val, func(curr1, curr2, carry))
        return func(l1, l2, 0)

# Iterative Approach
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        curr = dummy

        carry = 0
        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            val = val1 + val2 + carry

            carry = val > 9
            val %= 10
            curr.next = ListNode(val)
            curr = curr.next

            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        return dummy.next
