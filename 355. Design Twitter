class Twitter:

    def __init__(self):
        self.count = 0
        self.tweetMap = defaultdict(list) # userId -> list of [count, tweetID]
        self.followMap = defaultdict(set) # userID -> set of followID

    def postTweet(self, userId: int, tweetId: int) -> None:
        self.tweetMap[userId].append([self.count, tweetId])
        self.count -= 1

    def getNewsFeed(self, userId: int) -> List[int]:
        minheap = self.tweetMap[userId][::-1].copy()
        for f in self.followMap[userId]:
            for count, tweet in self.tweetMap[f]:
                heapq.heappush(minheap, [count, tweet])
        
        res = []
        for _ in range(10):
            if not minheap:
                break
            res.append(heapq.heappop(minheap)[1])
        return res
    
    def follow(self, followerId: int, followeeId: int) -> None:
        self.followMap[followerId].add(followeeId)

    def unfollow(self, followerId: int, followeeId: int) -> None:
        if followeeId in self.followMap[followerId]:
            self.followMap[followerId].remove(followeeId)
