# Recursive Approach:
class Solution:
    def allPossibleFBT(self, n: int) -> List[Optional[TreeNode]]:
        if n % 2 == 0:
            return []
        if n == 1:
            return [TreeNode()]

        res = []
        for i in range(1, n, 2):
            res.extend(TreeNode(left=left, right=right) for right in self.allPossibleFBT(n-1-i) for left in self.allPossibleFBT(i))   
        return res


# Recursive with Memoization Approach:
class Solution:
    def allPossibleFBT(self, n: int) -> List[Optional[TreeNode]]:
        if n % 2 == 0:
            return []

        dp = {}
        def func(n):
            if n == 1:
                return [TreeNode()]
            if n in dp:
                return dp[n]

            res = []
            for i in range(1, n, 2):
                for left in func(i):
                    for right in func(n-1-i): 
                        res.append(TreeNode(left=left, right=right))   
            dp[n] = res
            return dp[n]
        return func(n)
