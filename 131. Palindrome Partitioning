# Solution on LeetCode: https://leetcode.com/problems/palindrome-partitioning/solutions/7000315/dfs-backtracking-solution-simple-efficie-g2h8/

class Solution:
    def partition(self, s: str) -> List[List[str]]:
        res, part = [], []
        length = len(s)

        def isPalindrome(left, right):
            while left < right:
                if s[left] != s[right]:
                    return False
                left, right = left + 1, right - 1
            return True

        def dfs(i):
            if i == length:
                res.append(part.copy())
                return
            for j in range(i, length):
                if isPalindrome(i, j):
                    part.append(s[i: j + 1])
                    dfs(j + 1)
                    part.pop()

        dfs(0)
        return res
