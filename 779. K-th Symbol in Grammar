# Problem: 779. K-th Symbol in Grammar
# My solution on leetCode: https://leetcode.com/problems/k-th-symbol-in-grammar/solutions/6892867/three-optimized-solutions-recursive-bina-niaj/


# Solution 1: Recursive Approach
class Solution:
    def kthGrammar(self, n: int, k: int) -> int:
        if n == 1:
            return 0
        return self.kthGrammar(n - 1, (k + 1) // 2) if k % 2 else 1 - self.kthGrammar(n - 1, k // 2)

# Solution 2: Binary Search Interpretation
class Solution:
    def kthGrammar(self, n: int, k: int) -> int:
        left, right = 1, 2 ** (n - 1)
        curr = 0
        for _ in range(n - 1):
            mid = (left + right) // 2
            if k <= mid:
                right = mid
            else:
                curr = 1 - curr
                left = mid + 1
        return curr

# Solution 3: Bit Manipulation with Logarithmic Traversal
from math import log

class Solution:
    def kthGrammar(self, n: int, k: int) -> int:
        count = 0
        k -= 1
        while k > 1:
            k -= 2 ** int(log(k) / log(2))
            count += 1
        return int('01'[k]) if count % 2 == 0 else int('10'[k])
