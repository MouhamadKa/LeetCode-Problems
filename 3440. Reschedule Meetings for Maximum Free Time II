# Solution on LeetCode: https://leetcode.com/problems/reschedule-meetings-for-maximum-free-time-ii/solutions/6943285/easy-approach-beats-100-by-mouhamad-kase-kt8v/

class Solution:
    def maxFreeTime(self, eventTime: int, startTime: List[int], endTime: List[int]) -> int:
        spaces = [startTime[0]]
        startTime.append(eventTime)
        N = len(startTime)
        max_space_1 = startTime[0]
        max_space_2 = max_space_3 = 0
        max_index_1 = max_index_2 = max_index_3 = 0
        
        for i in range(1, N):
            s = startTime[i] - endTime[i - 1]
            spaces.append(s)
            if s > max_space_1:
                max_space_3, max_index_3 = max_space_2, max_index_2
                max_space_2, max_index_2 = max_space_1, max_index_1
                max_space_1, max_index_1 = s, i
            elif s > max_space_2:
                max_space_3, max_index_3 = max_space_2, max_index_2
                max_space_2, max_index_2 = s, i
            elif s > max_space_3:
                max_space_3, max_index_3 = s, i
                
        res = 0
        for i in range(N - 1):
            if max_space_1 >= endTime[i] - startTime[i] and (max_index_1 != i and max_index_1 != i + 1) or \
               max_space_2 >= endTime[i] - startTime[i] and (max_index_2 != i and max_index_2 != i + 1) or \
               max_space_3 >= endTime[i] - startTime[i] and (max_index_3 != i and max_index_3 != i + 1):
                s = spaces[i] + spaces[i + 1] + endTime[i] - startTime[i]
            else:
                s = spaces[i] + spaces[i + 1]
            res = max(res, s)
        return res
