# Recursive Approach
class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        def func(node):
            if not node or not node.next:
                return node
            nxt = node.next.next
            res = node.next
            res.next = node
            node.next = func(nxt)
            return res
        return func(head)

# Iterative Approach
class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head
        
        dummy = ListNode(next=head.next)
        node = head
        while node and node.next:
            nxt = node.next
            nxt2 = nxt.next
            nxt.next = node
            node.next = nxt2.next if nxt2 and nxt2.next else nxt2
            node = nxt2
        return dummy.next
