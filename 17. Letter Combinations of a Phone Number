# Solution on GitHub: https://leetcode.com/problems/letter-combinations-of-a-phone-number/solutions/6977272/efficient-backtracking-solution-beats-10-kd57/

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        digits_dict = {
            '2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'], '4':['g', 'h', 'i'], '5': ['j', 'k', 'l'],
            '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']
        }
        res = []
        n = len(digits)
        def func(index, curr_word):
            nonlocal n
            if index == n:
                res.append(curr_word)
                return
            for letter in digits_dict[digits[index]]:
                func(index + 1, curr_word + letter)
        func(0, '')
        return res
